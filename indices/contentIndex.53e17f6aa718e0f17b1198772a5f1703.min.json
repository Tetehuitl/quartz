{"/":{"title":"DAEDALIST","content":"\n```c\n                      ,~-.\n                     (  ' )-.          ,~'`-.\n                  ,~' `  ' ) )       _(   _) )\n                 ( ( .--.===.--.    (  `    ' )\n                  `.%%.;::|888.#`.   `-'`~~=~'\n                  /%%/::::|8888\\##\\\n                 |%%/:::::|88888\\##|\n                 |%%|:::::|88888|##|.,-.\n                 \\%%|:::::|88888|##/    )_\n                  \\%\\:::::|88888/#/ ( `'  )\n                   \\%\\::::|8888/#/(  ,  -'`-.\n               ,~-. `%\\:::|888/#'(  (     ') )\n              (  ) )_ `\\__|__/'   `~-~=--~~='\n             ( ` ')  ) [VVVVV]\n            (_(_.~~~'   \\|_|/   hjw\n                        [XXX]\n                        `\"\"\"'\n```\n\n# Purpose\nThe purpose of daedalist.net is mainly to keep personal technical documentation and references.\n\n# Tutorials\n[[content/notes/Resize Disk .img]]\n# How-To Guides\nwrite how-to guides\n[[content/notes/test page]]\n# Explanation\n# Reference Guides\n","lastmodified":"2022-10-18T06:56:45.39318823Z","tags":null},"/notes/Resize-Disk-.img":{"title":"Resize Disk .img","content":"### Shrinking images on Linux\n\n**Context of the problem**:\n\nHaving a `myimage.img` bigger then the hardware support (if it is smaller there should be no problem; however, using the same strategy, you can better fit the image in the hardware support).\n\nInstruments: GParted, `fdisk` and `truncate`.\n\n**Creating loopback device**:\n\nLet's enable enable the loopback:\n\n```text-plain\nsudo modprobe loop\n```\n\nLet's request a new (free) loopback device:\n\n```text-plain\nsudo losetup -f\n```\n\nThe command returns the path to a free loopback device:\n\n```text-plain\n/dev/loop0\n```\n\nLet's create a device of the image:\n\n```text-plain\nsudo losetup /dev/loop0 myimage.img\n```\n\nThe device `/dev/loop0` represents `myimage.img`. We want to access the partitions that are on the image, so we need to ask the kernel to load those too:\n\n```text-plain\nsudo partprobe /dev/loop0\n```\n\nThis should give us the device `/dev/loop0p1`, which represents the first partition in `myimage.img`. We do not need this device directly, but GParted requires it.\n\n**Resize partition using GParted**:\n\nLet's load the new device using GParted:\n\n```text-plain\nsudo gparted /dev/loop0\n```\n\nWhen the GParted application opens, it should appear a window similar to the following:\n\n[![](api/images/Kn6pyl3ip2T4/vD5Zl.png)](https://i.stack.imgur.com/vD5Zl.png)\n\nNow notice a few things:\n\n-   There is one partition.\n-   The partition allocates the entire disk/device/image.\n-   The partition is filled partly.\n\nWe want to resize this partition so that is fits its content, but not more than that.\n\nSelect the partition and click Resize/Move. A window similar to the following will pop up:\n\n[![](api/images/t3NvR5Zphwra/neyQo.png)](https://i.stack.imgur.com/neyQo.png)\n\nDrag the right bar to the left as much as possible.\n\nNote that sometimes GParted will need a few MB extra to place some filesystem-related data. You can press the up-arrow at the New size-box a few times to do so. For example, I pressed it 10 times (=10MiB) for FAT32 to work. For NTFS you might not need to at all.\n\nFinally press Resize/Move. You will return to the GParted window. This time it will look similar to the following:\n\n[![](api/images/EmjBVCAgwbb4/aBMwt.png)](https://i.stack.imgur.com/aBMwt.png)\n\nNotice that there is a part of the disk unallocated. This part of the disk will not be used by the partition, so we can shave this part off of the image later. GParted is a tool for disks, so it doesn't shrink images, only partitions, we have to do the shrinking of the image ourselves.\n\nPress Apply in GParted. It will now move files and finally shrink the partition, so it can take a minute or two, but most of the time it finishes quickly. Afterwards close GParted.\n\nNow we don't need the loopback-device anymore, so unload it:\n\n```text-plain\nsudo losetup -d /dev/loop0\n```\n\n**Shaving the image**:\n\nNow that we have all the important data at the beginning of the image it is time to shave off that unallocated part. We will first need to know where our partition ends and where the unallocated part begins. We do this using `fdisk`:\n\n```text-plain\nfdisk -l myimage.img\n```\n\nHere we will see an output similar to the following:\n\n```text-plain\nDisk myimage.img: 6144 MB, 6144000000 bytes, 12000000 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x000ea37d\n\n      Device Boot      Start         End      Blocks   Id  System\nmyimage.img1            2048     9181183     4589568    b  W95 FAT32\n```\n\nNote two things in the output:\n\n-   The partition ends on block 9181183 (shown under `End`)\n-   The block-size is 512 bytes (shown as sectors of `1 * 512`)\n\nWe will use these numbers in the rest of the example. The block-size (512) is often the same, but the ending block (9181183) will differ for you. The numbers mean that the partition ends on byte 9181183_512 of the file. After that byte comes the unallocated-part. Only the first 9181183_512 bytes will be useful for our image.\n\nNext we shrink the image-file to a size that can just contain the partition. For this we will use the `truncate` command (thanks uggla!). With the truncate command need to supply the size of the file in bytes. The last block was 9181183 and block-numbers start at 0. That means we need (9181183+1)*512 bytes. This is important, else the partition will not fit the image. So now we use truncate with the calculations:\n\n```text-plain\ntruncate --size=$[(9181183+1)*512] myimage.img\n```\n\n```text-plain\n dd if=/dev/sdc of=/path/to/file/myimage.img\n```\n\n```text-plain\n umount /dev/sdc1\n umount /dev/sdc2\n```","lastmodified":"2022-10-18T06:56:45.39318823Z","tags":null},"/notes/test-page":{"title":"test page","content":"This is a test page to see why the link I made isn't working. [[Resize Disk .img]]\n[[../_index]]","lastmodified":"2022-10-18T06:56:45.39318823Z","tags":null}}